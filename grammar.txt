Z ::= EXPRESSION EXPRESSIONS

EXPRESSIONS ::= ('\n' EXPRESSION)*

EXPRESSION ::= EXPRESSION_IF
             | EXPRESSION_FOR
             | EXPRESSION_WHILE
             | EXPRESSION_DO_UNTIL
             | EXPRESSION_CONTINUE
             | EXPRESSION_BREAK
             | EXPRESSION_TRYCATCH
             | EXPRESSION_THROW
             | EXPRESSION_FUNCTION
             | EXPRESSION_RETURN
             | EXPRESSION_INCLUDE
             | EXPRESSION_RUN
             | EXPRESSION_READ
             | EXPRESSION_PRINT
             | ASSIGNMENT
             | OPERATION

EXPRESSION_IF ::= <if> EXPRESSION <then> EXPRESSIONS (<else> EXPRESSIONS)? <end>

EXPRESSION_FOR ::= <for> identifier '<-' EXPRESSION ',' EXPRESSION (',' EXPRESSION)? <execute> EXPRESSIONS <end>

EXPRESSION_WHILE ::= <while> EXPRESSION <execute> EXPRESSIONS <end>

EXPRESSION_DO_UNTIL ::= <do> EXPRESSIONS <until> EXPRESSION

EXPRESSION_CONTINUE ::= <continue>

EXPRESSION_BREAK ::= <break>

EXPRESSION_TRYCATCH ::= <try> EXPRESSIONS <catch> identifier <then> EXPRESSIONS <end>

EXPRESSION_THROW ::= <throw> EXPRESSION

EXPRESSION_FUNCTION ::= <function> identifier '(' (identifier (',' identifier)*)? ')' ':' EXPRESSIONS <end>

EXPRESSION_RETURN ::= <return> EXPRESSION

EXPRESSION_INCLUDE ::= <include> string

EXPRESSION_RUN ::= <run> string

EXPRESSION_READ ::= <read> ('<' identifier '>')? identifier (',' identifier)*

EXPRESSION_PRINT ::= <print> ('<' identifier '>')? EXPRESSION (',' EXPRESSION)*

ASSIGNMENT ::= <let> identifier INDEX_ACCESS* '<-' EXPRESSION

INDEX_ACCESS ::= '[' EXPRESSION ']'

OPERATION ::= COMPARISON ( (<and> | <or>) COMPARISON )*

COMPARISON ::= ARITH ( ('=' | '<' | '<=' | '>' | '>=' | '!=') ARITH )*

ARITH ::= TERM ( ('+' | '-') TERM )*

TERM ::= FACTOR ( ('*' | '/' | '%') FACTOR )*

FACTOR ::= BASE FN_CALL
         | BASE INDEX_ACCESS*

FN_CALL ::= '(' ( EXPRESSION (',' EXPRESSION)* )? ')'

BASE ::= number
       | char
       | string
       | identifier
       | ARRAY
       | DICTIONARY
       | '(' EXPRESSION ')'
       | UNARY

ARRAY ::= '[' (EXPRESSION (',' EXPRESSION)*)? ']'

DICTIONARY ::= '{' (EXPRESSION ':' EXPRESSION (',' EXPRESSION ':' EXPRESSION)*)? '}'

UNARY ::= ('+' | '-') BASE

identifier ::= [a-zA-Z_][a-zA-Z0-9_]* % regex

number ::= [0-9]+ ('.' [0-9]+)? % regex

string ::= '"' char1* '"'

char ::= "'" char1 "'"

char1 ::= escaped_char | [^'\\]

escaped_char ::= '\\' ['"\\0abfnrtv] % \' \" \0 \a \b \f \n \r \t \v
